@page "/degrees"
@layout MMLayout
@using MapaAndMaya.Services;
@using MapaAndMaya.Services.Models;
@using Microsoft.Extensions.Logging

@inject FacultyService FacultyService;
@inject DegreeService DegreeService;
@inject DialogService DialogService;
@inject NotificationService NotificationService;
@inject ILogger<Faculties> Logger;

<PageTitle>Carreras</PageTitle>

<RadzenRow>
    <RadzenColumn Size="12">
        <RadzenText Text="Carreras" TextStyle="TextStyle.H3" TagName="TagName.H1"/>
    </RadzenColumn>
</RadzenRow>

<RadzenPanel>
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Right">
            <RadzenButton Icon="add_circle_outline" Text="Agregar" ButtonStyle="ButtonStyle.Primary" Click="@AddItem" class="my-3"/>
            <RadzenButton Icon="delete_forever" Text="Eliminar" Click="@DeleteItems" class="my-3" ButtonStyle="ButtonStyle.Danger" Disabled="@(SelectedDegrees == null || SelectedDegrees.Count == 0)"/>
        </RadzenStack>
    </HeaderTemplate>
     <ChildContent>
            <RadzenDataGrid @ref=_grid Data="@DegreesCollection" TItem="Degree"  AllowPaging="true"  AllowColumnResize="true" 
                            PageSize="10" PagerHorizontalAlign="HorizontalAlign.Center" IsLoading="@_isLoading"
                            AllowFiltering="true"  FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
                            LogicalFilterOperator="LogicalFilterOperator.And" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                            AllowSorting="true" SelectionMode="DataGridSelectionMode.Multiple" @bind-Value="@SelectedDegrees"
                            Density="Density.Compact">
                            <EmptyTemplate>
                                    <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Nada que mostrar.</p>
                                </EmptyTemplate>
                <Columns>
                    <RadzenDataGridColumn TItem="Degree" Width="60px" Sortable="false" Filterable="false">
                        <HeaderTemplate>
                            <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                                            Value="@(SelectedDegrees == null || SelectedDegrees?.Any() != true ? false : !DegreesCollection.All(i => SelectedDegrees.Contains(i)) ? null : DegreesCollection.Any(i => SelectedDegrees.Contains(i)))"
                                            Change="@(args => SelectedDegrees = args == true ? DegreesCollection.ToList() : null)"/>
                        </HeaderTemplate>
                        <Template Context="data">
                            <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedDegrees != null && SelectedDegrees.Contains(data))" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                                            TValue="bool"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Degree" Property="Name" Title="Nombre"/>
                    <RadzenDataGridColumn TItem="Degree" Property="AccreditationStatus" Title="Acreditación" TextAlign="TextAlign.Center" Width="150px"/>
                    <RadzenDataGridColumn TItem="Degree" Property="Faculty.Name" Title="Facultad" Sortable="true" />
                    <RadzenDataGridColumn TItem="Degree" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                        <Template Context="data">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                          Click="@(_ => EditItem(data))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </ChildContent>
</RadzenPanel>


@code {
    
    private async Task ShowFormularyDialog(Action onSummit, string title)
    {
        
        var result = await DialogService.OpenAsync(title, ds =>
                @<EditForm Model="@DegreeViewModel" OnValidSubmit="@onSummit">
                    <DataAnnotationsValidator/>
                    <div class="container-fluid">
                        <div class="row ">
                            <div class="col-md-6 pb-3">
                            <RadzenLabel Component="Name" Text="Nombre de la Carrera:"/> <br/>
                                <RadzenTextBox @bind-Value="DegreeViewModel.Name" Style="width: 200px;"/>
                                <ValidationMessage For="@(() => DegreeViewModel.Name)"/>
                            </div>
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="DropDownFaculties" Text="Facultad a la que pertenece:"/> <br/>
                                 <RadzenDropDown @bind-Value="DegreeViewModel.FacultyId" Data=@FacultiesList TextProperty="Name" ValueProperty="Id" Style="width: 100%; max-width: 400px;" Name="DropDownFaculties" />
                                <ValidationMessage For="@(() => DegreeViewModel.FacultyId)"/>
                                </div>
                        </div>
                    </div>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" Icon="save" class="me-1"/>
                        <RadzenButton Text="Cancelar" Icon="clear" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="me-1"/>
            </RadzenStack>
            </EditForm>
            , new DialogOptions { Width = $"{800}px" }
        );
    }

    private async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", _ =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
                <RadzenText TextStyle="TextStyle.H6" Text="@message"></RadzenText>
        </RadzenStack>, new DialogOptions { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}