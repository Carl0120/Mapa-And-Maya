@using MapaAndMaya.Services.Models
@using Group = MapaAndMaya.Services.Models.Group;
@using MapaAndMaya.Services
@using Microsoft.Extensions.Logging

@inject DialogService DialogService;
@inject GroupService GroupService;
@inject NotificationService NotificationService;
@inject ILogger<GroupsTable> Logger;

<RadzenCard Style="margin-bottom:20px; padding-right:20px; max-width:50%; margin-left:20px;">

    <p>Grupos de</p>
    <div style=" margin: 2rem 0px;">
        <RadzenRow JustifyContent="JustifyContent.Right">
               <RadzenButton Icon="add_circle_outline" Text="Agregar" ButtonStyle="ButtonStyle.Primary" Click="@AddItem" class="my-2"/>
        </RadzenRow>
        <RadzenDataGrid @ref=_grid AllowFiltering="true" AllowPaging="true" AllowSorting="true" Data="@Data.Groups">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Sin grupos que mostrar.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="Group" Property="AcademicCourse" Title="Curso"/>
                <RadzenDataGridColumn TItem="Group" Property="AcademicYear" Title="Año académico"/>
                <RadzenDataGridColumn TItem="Group" Property="Enrollment" Title="Matricula"/>
                <RadzenDataGridColumn TItem="Group" Context="group" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                    <Template Context="group">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                      Click="@(_ => EditGroup(group))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Group" Context="group" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="80px">
                    <Template Context="group">
                        <RadzenButton Icon="delete_forever" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                      Click="@(_ => DeleteGroup(group))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</RadzenCard>


@code {

 private async Task ShowFormularyDialog(Action onSummit, string title)
 {
     
     var result = await DialogService.OpenAsync(title, ds =>
             @<EditForm Model="@ViewModel" OnValidSubmit="@onSummit">
                 <DataAnnotationsValidator/>
                 <div class="container-fluid">
                     <div class="row ">
                         <RadzenLabel Component="AcademicCourse" Text="Curso"/> <br/>
                         <div class="col-md-12 pb-3">
                             <RadzenNumeric @bind-Value="ViewModel.AcademicCourse" Name="AcademicCourse"  Step="1" style="width: 100%;"/>
                             <ValidationMessage For="@(() => ViewModel.AcademicCourse)"/>
                         </div>
                         <RadzenLabel Component="AcademicYear" Text="Año"/> <br/>
                         <div class="col-md-12 pb-3">
                             <RadzenNumeric @bind-Value="ViewModel.AcademicYear" Name="AcademicYear"  Step="1" style="width: 100%;"/>
                             <ValidationMessage For="@(() => ViewModel.AcademicYear)"/>
                         </div>
                          <RadzenLabel Component="Enrollment" Text="Matrícula"/> <br/>
                         <div class="col-md-12 pb-3">
                             <RadzenNumeric @bind-Value="ViewModel.Enrollment" Name="Enrollment"  Step="1" style="width: 100%;"/>
                             <ValidationMessage For="@(() => ViewModel.Enrollment)"/>
                         </div>
                     </div>
                 </div>
                 <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right">
                     <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" Icon="save" class="me-1"/>
                     <RadzenButton Text="Cancelar" Icon="clear" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="me-1"/>
         </RadzenStack>
         </EditForm>
         , new DialogOptions { Width = $"{400}px" }
     );
 }

 private async Task BusyDialog(string message)
 {
     await DialogService.OpenAsync("", _ =>
         @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
             <RadzenText TextStyle="TextStyle.H6" Text="@message"></RadzenText>
     </RadzenStack>, new DialogOptions { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
 }

}